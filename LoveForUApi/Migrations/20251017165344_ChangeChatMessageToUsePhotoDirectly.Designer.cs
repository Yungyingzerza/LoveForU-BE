// <auto-generated />
using System;
using LoveForU.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LoveForUApi.Migrations
{
    [DbContext(typeof(LoveForUContext))]
    [Migration("20251017165344_ChangeChatMessageToUsePhotoDirectly")]
    partial class ChangeChatMessageToUsePhotoDirectly
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LoveForU.Models.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhotoShareId")
                        .HasColumnType("uuid");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("PhotoShareId");

                    b.HasIndex("SenderId");

                    b.HasIndex("ThreadId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("LoveForU.Models.ChatThread", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FriendshipId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FriendshipId")
                        .IsUnique();

                    b.ToTable("ChatThreads");
                });

            modelBuilder.Entity("LoveForU.Models.Friendship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddresseeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RespondedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddresseeId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("LoveForU.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UploaderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UploaderId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("LoveForU.Models.PhotoShare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uuid");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("SharedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ViewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("RecipientId");

                    b.ToTable("PhotoShares");
                });

            modelBuilder.Entity("LoveForU.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("displayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("pictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LoveForU.Models.ChatMessage", b =>
                {
                    b.HasOne("LoveForU.Models.Photo", "Photo")
                        .WithMany("ChatMessages")
                        .HasForeignKey("PhotoId");

                    b.HasOne("LoveForU.Models.PhotoShare", null)
                        .WithMany("Messages")
                        .HasForeignKey("PhotoShareId");

                    b.HasOne("LoveForU.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoveForU.Models.ChatThread", "Thread")
                        .WithMany("Messages")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("Sender");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("LoveForU.Models.ChatThread", b =>
                {
                    b.HasOne("LoveForU.Models.Friendship", "Friendship")
                        .WithOne("Thread")
                        .HasForeignKey("LoveForU.Models.ChatThread", "FriendshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friendship");
                });

            modelBuilder.Entity("LoveForU.Models.Friendship", b =>
                {
                    b.HasOne("LoveForU.Models.User", "Addressee")
                        .WithMany()
                        .HasForeignKey("AddresseeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoveForU.Models.User", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addressee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("LoveForU.Models.Photo", b =>
                {
                    b.HasOne("LoveForU.Models.User", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("LoveForU.Models.PhotoShare", b =>
                {
                    b.HasOne("LoveForU.Models.Photo", "Photo")
                        .WithMany("Shares")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoveForU.Models.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("LoveForU.Models.ChatThread", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("LoveForU.Models.Friendship", b =>
                {
                    b.Navigation("Thread");
                });

            modelBuilder.Entity("LoveForU.Models.Photo", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Shares");
                });

            modelBuilder.Entity("LoveForU.Models.PhotoShare", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
